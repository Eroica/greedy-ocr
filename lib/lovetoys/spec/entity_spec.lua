require 'lovetoys'

describe('Entity', function()
    describe(':add(), get() and has()', function()
        it('add Component', function()
            local entity = Entity()
            local TestComponent = class('TestComponent', Component)
            local testComponent = TestComponent()
            entity:add(testComponent)
            assert.is_true(testComponent == entity[testComponent.__name])
        end)
        it('doesn`t add the same Component twice', function()
            local entity = Entity()
            local TestComponent = class('TestComponent', Component)
            local testComponent = TestComponent()
            testComponent.int = 12
            entity:add(testComponent)
            assert.is_true(entity[testComponent.__name].int == 12)
            -- Creation of new testComponent with varying variables
            testComponent = TestComponent()
            testComponent.int = 13
            entity:add(testComponent)
            assert.is_true(entity[testComponent.__name].int == 12)
        end)
        it('gets a Component', function()
            local entity = Entity()
            local TestComponent = class('TestComponent', Component)
            local testComponent = TestComponent()
            entity:add(testComponent)
            assert.is_true(testComponent == entity.get(testComponent.__name))
        end)
        it('gets a Component', function()
            local entity = Entity()
            local TestComponent = class('TestComponent', Component)
            local testComponent = TestComponent()
            entity:add(testComponent())
            assert.is_true(entity.has(testComponent.__name))
        end)
    end)
    describe(':set()', function()
        it('adds and overwrites Components', function()
            local entity = Entity()
            local TestComponent = class('TestComponent', Component)
            local testComponent = TestComponent()
            testComponent.int = 12
            entity:set(testComponent)
            assert.is_true(entity[testComponent.__name].int == 12)
            testComponent = TestComponent()
            testComponent.int = 13
            entity:set(testComponent)
            assert.is_true(entity[testComponent.__name].int == 13)
        end)
    end)
    describe(':addMultiple()', function()
        it('adds Multiple Components at once', function()
            local entity = Entity()
            local TestComponent1 = class('TestComponent1', Component)
            local TestComponent2 = class('TestComponent2', Component)
            local TestComponent3 = class('TestComponent3', Component)
            local testComponent1, testComponent2, testComponent3 = TestComponent1(), TestComponent2(), TestComponent3()
            local componentList = {testComponent1, testComponent2, testComponent3}
            entity:addMultiple(componentList)
            assert.is_true(entity[testComponent1.__name] == testComponent1)
            assert.is_true(entity[testComponent2.__name] == testComponent2)
            assert.is_true(entity[testComponent3.__name] == testComponent3)
        end)
    end)
    describe(':setParent() and getParent()', function()
        it('adds a Parent', function()
            local entity = Entity()
            local parent = Entity()
            entity:setParent(parent)
            assert.is_true(entity.parent == parent)
        end)
        it('gets a Parent', function()
            local entity = Entity()
            local parent = Entity()
            entity:setParent(parent)
            assert.is_true(entity:getParent() == parent)
        end)
        it('registers as a Child', function()
            local entity = Entity()
            entity.id = 1
            local parent = Entity()
            entity:setParent(parent)
            assert.is_true(entity:getParent().children[entity.id] == entity)
        end)
    end)
end)
